class Solution {
    private void dfs(int row,int col,int[][] visited,char[][] board,int[] delrow,int[] delcol){
        visited[row][col]=1;
        int n=board.length;
        int m=board[0].length;
        for (int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if (nrow>=0 && nrow<n && ncol>=0 && ncol<m && visited[nrow][ncol]==0 && board[nrow][ncol]=='O'){
                dfs(nrow,ncol,visited,board,delrow,delcol);
            }
        }
    }
    public void solve(char[][] board) {
        int n=board.length;int m=board[0].length;
        int[][]visited=new int[n][m];
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        for (int j=0;j<m;j++){
            if (visited[0][j]==0 && board[0][j]=='O'){
                dfs(0,j,visited,board,delrow,delcol);
            }
            if (visited[n-1][j]==0 && board[n-1][j]=='O'){
                dfs(n-1,j,visited,board,delrow,delcol);
            }
        }
        for (int i=0;i<n;i++){
            if (visited[i][0]==0 && board[i][0]=='O'){
                dfs(i,0,visited,board,delrow,delcol);
            }
            if (visited[i][m-1]==0 && board[i][m-1]=='O'){
                dfs(i,m-1,visited,board,delrow,delcol);
            }
        }
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (visited[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        
    }
}
