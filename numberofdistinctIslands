// User function Template for Java

class Solution {
    private void dfs(int row,int col,int[][] vis,int[][] grid,ArrayList<Integer> list,int baserow,int basecol,int[] delrow,int[] delcol){
        vis[row][col]=1;
        list.add(row-baserow);
        list.add(col-basecol);
        int n=grid.length;
        int m=grid[0].length;
        for (int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if (nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                dfs(nrow,ncol,vis,grid,list,baserow,basecol,delrow,delcol);
            }
        }
        
        
    }

    int countDistinctIslands(int[][] grid) {
        // Your Code here
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        HashSet<ArrayList<Integer>> set=new HashSet<>();
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (vis[i][j]==0 && grid[i][j]==1){
                    ArrayList<Integer> list=new ArrayList<>();
                    dfs(i,j,vis,grid,list,i,j,delrow,delcol);
                    set.add(list);
                }
            }
        }
        return set.size();
    }
}
